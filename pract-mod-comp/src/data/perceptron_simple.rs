//-------------------------------------------------------------------//
//  AUTHOR:    @sfmolina                                            //
//  Version:   v1                                                  //
//  Modified:  20no24                                             //
//---------------------------------------------------------------//



use std::fmt::{self, Display, Formatter};
use nalgebra::DMatrix;



#[derive(PartialEq, Clone, Copy)]
pub enum Problem {
    Xor,
    And,
    Or,
    L5,
    L10,
    L50,
    Csv,
}
impl Display for Problem {
    fn fmt(&self, f: &mut Formatter) -> fmt::Result {
        match self {
            Problem::Xor => write!(f, "XOR"),
            Problem::And => write!(f, "AND"),
            Problem::Or => write!(f, "OR"),
            Problem::L5 => write!(f, "L5"),
            Problem::L10 => write!(f, "L10"),
            Problem::L50 => write!(f, "L50"),
            Problem::Csv => write!(f, "CSV"),
        }
    }
}


pub fn and_problem() -> DMatrix<f64> {
    
    DMatrix::from_row_slice(4, 3, &[
        0.0, 0.0, -1.0,
        0.0, 1.0, -1.0,
        1.0, 0.0, -1.0,
        1.0, 1.0, 1.0,
    ])

}


pub fn or_problem() -> DMatrix<f64> {
    
    DMatrix::from_row_slice(4, 3, &[
        0.0, 0.0, -1.0,
        0.0, 1.0, 1.0,
        1.0, 0.0, 1.0,
        1.0, 1.0, 1.0,
    ])

}


pub fn xor_problem() -> DMatrix<f64> {
    
    DMatrix::from_row_slice(4, 3, &[
        0.0, 0.0, -1.0,
        0.0, 1.0, 1.0,
        1.0, 0.0, 1.0,
        1.0, 1.0, -1.0
    ])

}


pub fn l5_problem() -> DMatrix<f64> {
    
    DMatrix::from_row_slice(5, 3, &[
        0.952857100015069, 0.933153282305693, 1.0,
        0.219679410081459, 0.659413997192606, 1.0,
        0.394342930524923, 0.603278889307913, 1.0,
        0.81761944098256, 0.957345211871047, 1.0,
        0.564012565240221, 0.251921065200671, -1.0,
    ])

}


pub fn l10_problem() -> DMatrix<f64> {
    
    DMatrix::from_row_slice(10, 3, &[
        0.28589927165048, 0.933902410910093, 1.0,
        0.0143978738144152, 0.286119749458623, 1.0,
        0.357429995188167, 0.243494813223525, 1.0,
        0.483152946312023, 0.440437978174437, 1.0,
        0.199808725631803, 0.673344484307899, 1.0,
        0.231540881251274, 0.441851190370369, 1.0,
        0.313026815309907, 0.177735032715361, 1.0,
        0.940807490961708, 0.0782490635171199, -1.0,
        0.973518944066377, 0.00286696522378216, -1.0,
        0.602236537373144, 0.719035168111232, 1.0,
    ])

}


pub fn l50_problem() -> DMatrix<f64> {
    
    DMatrix::from_row_slice(50, 3, &[
        0.0713288063916586, 0.0558715704803552, 1.0,
        0.0923564141496592, 0.222505720248965, 1.0,
        0.559067295244544, 0.739054694238744, 1.0,
        0.688373926427304, 0.74091374992674, 1.0,
        0.300750942262194, 0.332985737945998, 1.0,
        0.720649958394702, 0.857283926826598, 1.0,
        0.394123320352289, 0.820577668794564, 1.0,
        0.353727157358621, 0.300779702885273, 1.0,
        0.607706270783478, 0.420862492437524, 1.0,
        0.959896652090623, 0.17726404750319, -1.0,
        0.853324814628809, 0.603668501380962, -1.0,
        0.0884844816003956, 0.883737701712702, 1.0,
        0.224145601475643, 0.386145726303965, 1.0,
        0.900378396717721, 0.500631325459699, -1.0,
        0.649425310562369, 0.861913962600965, 1.0,
        0.645006641489336, 0.16581025591293, -1.0,
        0.0536515755550576, 0.406279469306299, 1.0,
        0.654740069778757, 0.213404928801486, -1.0,
        0.168806313491368, 0.414953032054749, 1.0,
        0.222835080771371, 0.446408801317454, 1.0,
        0.2033877590157, 0.722178369019649, 1.0,
        0.544602974808143, 0.84048073243491, 1.0,
        0.923164546449649, 0.111876896448865, -1.0,
        0.928480466113521, 0.87535327698506, 1.0,
        0.971745366781194, 0.328307896568339, -1.0,
        0.801834970210183, 0.403053698582869, -1.0,
        0.960434859367795, 0.835010512398632, 1.0,
        0.947470407709337, 0.242104584851015, -1.0,
        0.0772188652447038, 0.204972830724511, 1.0,
        0.233594334657937, 0.857253046850928, 1.0,
        0.0350916452304818, 0.0262956178827491, 1.0,
        0.216976255704059, 0.949229490138506, 1.0,
        0.290122461727203, 0.299937597480289, 1.0,
        0.510307516896914, 0.283107410065681, -1.0,
        0.224769892133456, 0.803910575044471, 1.0,
        0.57153691877571, 0.537838709940437, 1.0,
        0.893306241367356, 0.25126416498514, -1.0,
        0.00766017493019799, 0.485767370975657, 1.0,
        0.0918303162538427, 0.61719393688954, 1.0,
        0.661972998607912, 0.831304820200699, 1.0,
        0.330276475662652, 0.484338524838928, 1.0,
        0.478769666766213, 0.0576977644190115, -1.0,
        0.451682904856716, 0.0411394028747438, -1.0,
        0.806530901540625, 0.00688913366014832, -1.0,
        0.0823339107705718, 0.778846071822572, 1.0,
        0.425106744043977, 0.305009358475237, 1.0,
        0.042898672914327, 0.136366079184654, 1.0,
        0.613907204942141, 0.359948398379732, -1.0,
        0.21739414689348, 0.402614862640931, 1.0,
        0.731383599220715, 0.05844618772854, -1.0,
    ])

}
